// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum Status {
  WAITING
  ONGOING
  COMPLETED
}

enum Sortation {
  EVENT
  NOTICE
}

enum Organizer {
  PROVIDER
  RECIVER
}

model User {
  userId             Int             @id @default(autoincrement())
  fullName           String
  username           String          @unique
  avatar             String?
  email              String          @unique
  password           String
  phoneNumber        String          @unique
  location           String?
  role               Role            @default(USER)
  searchHistoryOnOff Boolean         @default(true)
  notificationOnOff  Boolean         @default(true)
  blocking           User[]          @relation("FollowRelation", references: [userId]) // 차단 하려는 유저
  blocker            User[]          @relation("FollowRelation", references: [userId]) // 차단 당하는 유저
  notifications      Notification[]
  searchHistories    SearchHistory[]
  products           Product[]
  interests          Interest[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int        @id @default(autoincrement())
  authorId  Int
  title     String
  price     Int
  picture   String[]
  content   String
  hours     Int
  hits      Int        @default(0)
  status    Status     @default(WAITING)
  author    User       @relation(fields: [authorId], references: [userId])
  hashtags  Hashtag[]
  interests Interest[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Interest {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Hashtag {
  id        Int       @id @default(autoincrement())
  hashtag   String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  Int
  postId    Int
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  file      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notice {
  id        Int       @id @default(autoincrement())
  adminId   Int
  title     String
  content   String
  image     String?
  sortation Sortation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserReview {
  id        Int       @id @default(autoincrement())
  writerId  Int // 후기 작성자
  reciverId Int // 후기를 받는 사람
  content   String
  organizer Organizer
  productId Int?
  hide      Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  writerId  Int
  content   String
  hide      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
